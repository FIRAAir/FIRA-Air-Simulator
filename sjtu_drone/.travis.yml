# Use ubuntu focal (20.04)
os: ubuntu
dist: focal
language:
  - generic
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=noetic
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8'

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
  - sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
  - sudo apt-get update -qq
  - sudo apt install ros-$ROS_DISTRO-desktop-full
  - sudo apt-get install -y python3-catkin-pkg python3-rosdep python3-wstool python3-catkin-tools ros-$ROS_DISTRO-catkin
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update

  - sudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget curl
  - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
  - echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
  - sudo apt update -qq && sudo apt remove cmake -y && sudo apt install  cmake -y

# Create a catkin workspace with the package under integration.
install:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - mkdir -p ~/catkin_ws/src
  - cd ~/catkin_ws/src
  - catkin_init_workspace
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd ~/catkin_ws
  - catkin_make
  - source devel/setup.bash
  # Add the package under integration to the workspace using a symlink.
  - cd ~/catkin_ws/src
  - ln -s $CI_SOURCE_PATH .

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  # - cd ~/catkin_ws/src
  # - wstool init
  # - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  # - wstool up
  # # package depdencies: install using rosdep.
  - cd ~/catkin_ws
  - rosdep install -r -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO; true

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/catkin_ws
  - catkin_make 
  # - catkin_make $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  # - catkin_make run_tests && catkin_test_results
  - rospack profile
  - rospack list | grep sjtu_drone
